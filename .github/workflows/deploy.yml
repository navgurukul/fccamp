name: Deploy on Push or PR Merge

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    types:
      - closed # This triggers when a PR is merged or closed

jobs:
  build-api:
    name: Build Api (Container) Upload Artifect
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout Source Files
        uses: actions/checkout@v4 # v4.1.1
        with:
          submodules: 'recursive'

      - name: Create Image
        run: |
          docker build \
            -t fcc-api-gh \
            -f docker/api/Dockerfile .
            
      - name: Save Image
        run: docker save fcc-new-api > api-artifact.tar

      - name: Upload Api Artifact
        uses: actions/upload-artifact@v4 # v4.3.1
        with:
          name: api-artifact
          path: api-artifact.tar
     
          
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Download Api Artifact
      uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
      with:
        name: api-artifact

      
    - name: Run deployment script based on branch
      run: |
        scp -o StrictHostKeyChecking=no api-artifact.tar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/ubuntu/

        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
        cd /home/ubuntu/
        sudo docker load < ./api-artifact.tar
        rm api-artifact.tar
        
        if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
          ./deploy-fcc-dev.sh    # Run this script for dev branch
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          ./deploy-fcc-main.sh   # Run this script for main branch
        fi
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_USER: ${{ secrets.SSH_USER }}   # Secret for SSH username
        SSH_HOST: ${{ secrets.SSH_HOST }}   # Secret for SSH host
